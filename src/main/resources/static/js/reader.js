
document.addEventListener("DOMContentLoaded", function () {

    const searchInput = document.getElementById("searchInput");
    const searchIcon = document.getElementById("searchIcon");
    const clearSearch = document.getElementById("clearSearch");
    const reader = document.getElementById("reader");
    setTimeout(() => {
        loadChapters();
    }, 500);

    function highlightText(query) {
        if (!query.trim()) {
            document.querySelectorAll(".highlight").forEach(el => {
                el.outerHTML = el.innerText;
            });
            return;
        }

        const regex = new RegExp(escapeRegExp(query), "gi");

        function escapeRegExp(string) {
            return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }

        function processNode(node) {
            if (node.nodeType === 3) { // –¢–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
                let parent = node.parentNode;
                if (parent.classList.contains("highlight")) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

                const newText = node.nodeValue.replace(regex, (match) => `<span class="highlight">${match}</span>`);
                if (newText !== node.nodeValue) {
                    const span = document.createElement("span");
                    span.innerHTML = newText;
                    node.replaceWith(span);
                }
            } else if (node.nodeType === 1) {
                node.childNodes.forEach(processNode);
            }
        }

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
        document.querySelectorAll(".highlight").forEach(el => {
            el.outerHTML = el.innerText;
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö –∏ —Å–ø–∞–Ω–∞—Ö
        document.querySelectorAll("p, span").forEach(element => {
            element.childNodes.forEach(processNode);
        });
    }



    window.loadChapters = loadChapters;

    let allChapters = new Map();
    let allPagesLoaded = false; // –§–ª–∞–≥, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    async function loadChapters() {
        console.log("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—ã...");

        if (allPagesLoaded) {
            console.log("‚úÖ –ì–ª–∞–≤—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
            return;
        }

        allChapters.clear(); // –ß–∏—Å—Ç–∏–º –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π

        let totalPages = parseInt(document.getElementById("pageInput").max); // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        let bookId = window.location.pathname.split("/")[2];

        for (let page = 1; page <= totalPages; page++) {
            console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤...`);
            let response = await fetch(`/book/${bookId}?page=${page}`);
            let text = await response.text();
            let doc = new DOMParser().parseFromString(text, "text/html");
            let headings = doc.querySelectorAll("#reader section h3");

            console.log(`üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: –Ω–∞–π–¥–µ–Ω–æ ${headings.length} –≥–ª–∞–≤.`);

            headings.forEach((heading) => {
                let chapterText = heading.textContent.trim();
                let chapterId = `chapter-${allChapters.size + 1}`;

                if (!allChapters.has(chapterId)) {
                    allChapters.set(chapterId, { id: chapterId, page: page });
                    heading.id = chapterId;

                    let li = document.createElement("li");
                    li.textContent = chapterText;
                    li.dataset.target = chapterId;

                    // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º chapterId
                    li.addEventListener("click", function () {
                        goToChapter(chapterId);
                    });

                    document.getElementById("chapterList").appendChild(li);
                }
            });
        }

        allPagesLoaded = true;
        console.log("‚úÖ –í—Å–µ –≥–ª–∞–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", allChapters.size);
    }


    function findChapterPage(chapterText) {
        let chaptersPerPage = 2; // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        let chapterIndex = [...allChapters.keys()].indexOf(chapterText);
        return Math.ceil((chapterIndex + 1) / chaptersPerPage); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    function goToChapter(chapterId) {
        console.log(`üîπ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–µ: ${chapterId}`);

        const chapterElement = document.getElementById(chapterId);
        if (chapterElement) {
            console.log("‚úÖ –ì–ª–∞–≤–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º...");
            chapterElement.scrollIntoView({ behavior: "smooth" });
            return;
        }

        console.log("‚ùå –ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...");

        const chapterData = allChapters.get(chapterId);
        if (chapterData) {
            const bookId = window.location.pathname.split("/")[2];

            // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–ª–∞–≤–∞
            loadPage(`/book/${bookId}?page=${chapterData.page}`);

            // ‚úÖ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≤–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –∫ –≥–ª–∞–≤–µ
            setTimeout(() => {
                document.getElementById(chapterId)?.scrollIntoView({ behavior: "smooth" });
            }, 700);
        } else {
            console.error("üö® –ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!");
        }
    }


    // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–ª–∞–≤–µ
    function scrollToChapter(chapterId) {
        const bookId = window.location.pathname.split("/")[2]; // –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏

        const chapterElement = document.getElementById(chapterId);
        if (chapterElement) {
            console.log(`üîé –ì–ª–∞–≤–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–∫—Å—Ç–µ: ${chapterId}`);
            chapterElement.scrollIntoView({behavior: "smooth"}); // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        } else {
            console.log(`üîÑ –ì–ª–∞–≤–∞ ${chapterId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
            loadPage(`/book/${bookId}?chapter=${chapterId}`); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        }
    }





    window.highlightNote = highlightNote;


    function highlightNote(page) {
        const reader = document.getElementById("reader");
        if (!reader) {
            console.error("–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç #reader –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        console.log("highlightNote –≤—ã–∑–≤–∞–Ω–∞, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:", page);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        const savedText = localStorage.getItem("highlightFragment");
        if (!savedText) {
            console.warn("highlightNote: –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage");
            return;
        }

        console.log("–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏:", savedText);

        function escapeRegExp(string) {
            return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, match => match === "-" ? "-" : `\\${match}`);
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        const paragraphs = savedText.split(/\n+/).map(p => p.trim()).filter(p => p.length > 0);
        console.log("–ê–±–∑–∞—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:", paragraphs);

        let firstHighlightedElement = null; // –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–µ—Ä–≤–æ–º—É –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É

        function processNode(node) {
            if (node.nodeType === 3) { // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
                let parent = node.parentNode;
                if (parent.classList.contains("highlight")) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ

                let newText = node.nodeValue;
                paragraphs.forEach(para => {
                    const escapedPara = escapeRegExp(para);
                    try {
                        const regex = new RegExp(`(${escapedPara})`, "giu");
                        newText = newText.replace(regex, (match) => `<span class="highlight">${match}</span>`);
                    } catch (e) {
                        console.error("–û—à–∏–±–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏:", e, "–¢–µ–∫—Å—Ç:", para);
                    }
                });

                if (newText !== node.nodeValue) {
                    const span = document.createElement("span");
                    span.innerHTML = newText;
                    node.replaceWith(span);

                    if (!firstHighlightedElement) {
                        firstHighlightedElement = span; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    }
                }
            } else if (node.nodeType === 1 && node.closest("#reader")) {
                node.childNodes.forEach(processNode);
            }
        }

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –¢–û–õ–¨–ö–û –≤ –∫–Ω–∏–≥–µ
        reader.querySelectorAll(".highlight").forEach(el => {
            el.outerHTML = el.innerText;
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ –∫–Ω–∏–≥–∏
        // –î–æ–±–∞–≤–ª—è–µ–º "em" –∫ —Å–µ–ª–µ–∫—Ç–æ—Ä—É, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —ç–ª–µ–º–µ–Ω—Ç—ã <em>
        reader.querySelectorAll("p, span, em").forEach(element => {
            element.childNodes.forEach(processNode);
        });

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
        if (firstHighlightedElement) {
            setTimeout(() => {
                firstHighlightedElement.scrollIntoView({ behavior: "smooth", block: "center" });
            }, 200); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        }
    }


    document.addEventListener("click", function (event) {
        if (!event.target.classList.contains("highlight")) {
            console.log("–û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É");
            highlightText("");  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        }
    });

    searchIcon.addEventListener("click", function (event) {
        event.preventDefault();
        searchIcon.style.display = "none";
        searchInput.style.display = "inline-block";
        clearSearch.style.display = "inline-block";
        searchInput.focus();
    });

    document.addEventListener("click", function (event) {
        if (!searchInput.contains(event.target) && !searchIcon.contains(event.target) && !clearSearch.contains(event.target)) {
            searchInput.style.display = "none";
            clearSearch.style.display = "none";
            searchIcon.style.display = "inline-block";
        }
    });

    searchInput.addEventListener("input", function (event) {
        event.preventDefault();
        highlightText(this.value);
    });

    clearSearch.addEventListener("click", function (event) {
        event.preventDefault();
        searchInput.value = "";
        highlightText("");
    });

});









    function setTheme(theme) {
    let body = document.body;
    body.className = "";
    body.classList.add("theme-" + theme);

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–µ–º
    document.querySelectorAll('.theme-option').forEach(el => el.classList.remove('active'));

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    document.querySelector('.theme-' + theme).classList.add('active');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
    localStorage.setItem("selectedTheme", theme);
}

    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É

    function toggleSidebar() {
    document.getElementById("sidebar").classList.toggle("open");
}

    function changeFontSize(delta) {
    let content = document.getElementById("reader");
    let fontSizeDisplay = document.getElementById("fontSizeDisplay");

    let currentSize = parseInt(fontSizeDisplay.textContent); // –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ px
    let newSize = Math.max(12, Math.min(32, currentSize + delta)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 12px –¥–æ 32px

    content.style.fontSize = newSize + "px";
    fontSizeDisplay.textContent = newSize; // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ px
}
document.addEventListener("DOMContentLoaded", function () {
    const reader = document.getElementById("reader");
    const pageInput = document.getElementById("pageInput");
    const addNotePopup = document.getElementById("addNotePopup");

    let lastPage = window.location.href; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π URL

    function scrollToHighlighted() {
        const highlighted = document.querySelector(".highlight");
        if (highlighted) {
            highlighted.scrollIntoView({ behavior: "smooth", block: "center" });
        }
    }

    function loadPage(url) {
        if (url === lastPage) {
            console.log("‚úÖ –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∑–∞–º–µ—Ç–∫–µ");
            scrollToHighlighted();
            return;
        }

        lastPage = url;

        fetch(url)
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, "text/html");
                const newContent = doc.getElementById("reader").innerHTML;
                reader.innerHTML = newContent;

                document.querySelectorAll("emphasis").forEach(el => {
                    let em = document.createElement("em");
                    em.innerHTML = el.innerHTML;
                    el.replaceWith(em);
                });
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const newPageNumber = doc.querySelector("#pageInput").value;
                pageInput.value = newPageNumber;

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –í–ø–µ—Ä–µ–¥ / –ù–∞–∑–∞–¥
                updateNavigation(doc);

                // –û–±–Ω–æ–≤–ª—è–µ–º URL
                window.history.pushState({}, "", url);

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                addNotePopup.style.display = "none";

                // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - —Å–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö
                window.scrollTo({ top: 0, behavior: "instant" });

                // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞–≤–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –∫ –∑–∞–º–µ—Ç–∫–µ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
                setTimeout(scrollToHighlighted, 200);

                // üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                setTimeout(loadChapters, 500);
            })
            .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error));
    }



// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è" –∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" —Å—Ç—Ä–∞–Ω–∏—Ü–∞




    function updateNavigation(doc) {
        let prevPage = document.getElementById("prevPage");
        let nextPage = document.getElementById("nextPage");

        let newPrev = doc.querySelector("#prevPage");
        let newNext = doc.querySelector("#nextPage");

        console.log("–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é:", { newPrev, newNext });

        // üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (newPrev) {
            if (!prevPage) {
                prevPage = document.createElement("a");
                prevPage.id = "prevPage";
                prevPage.textContent = "–ù–∞–∑–∞–¥";
                prevPage.style.marginRight = "10px";
                document.querySelector(".navigation").prepend(prevPage);
            }
            prevPage.href = newPrev.href;
            prevPage.style.display = "inline";

            prevPage.replaceWith(prevPage.cloneNode(true));
            document.getElementById("prevPage").addEventListener("click", function (event) {
                event.preventDefault();
                loadPage(this.href);
            });
        } else if (prevPage) {
            prevPage.style.display = "none";
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if (newNext) {
            if (!nextPage) {
                nextPage = document.createElement("a");
                nextPage.id = "nextPage";
                nextPage.textContent = "–í–ø–µ—Ä–µ–¥";
                nextPage.style.marginLeft = "10px";
                document.querySelector(".navigation").appendChild(nextPage);
            }
            nextPage.href = newNext.href;
            nextPage.style.display = "inline";

            nextPage.replaceWith(nextPage.cloneNode(true));
            document.getElementById("nextPage").addEventListener("click", function (event) {
                event.preventDefault();
                loadPage(this.href);
            });
        } else if (nextPage) {
            nextPage.style.display = "none";
        }
    }



    const fontSelectIcon = document.getElementById("fontSelectIcon");
    const fontDropdown = document.getElementById("fontDropdown");
    const fontOptions = document.querySelectorAll(".font-option");


    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
    const savedFont = localStorage.getItem("selectedFont");
    if (savedFont) {
        reader.style.fontFamily = savedFont;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
    fontSelectIcon.addEventListener("click", function (event) {
        event.stopPropagation();
        fontDropdown.style.display = (fontDropdown.style.display === "block") ? "none" : "block";
        positionFontDropdown();
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞
    function positionFontDropdown() {
        const rect = fontSelectIcon.getBoundingClientRect();
        fontDropdown.style.position = "absolute";
        fontDropdown.style.left = `${rect.left}px`;
        fontDropdown.style.top = `${rect.bottom + window.scrollY + 5}px`;
    }

    // –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ–ø—Ü–∏—é
    fontOptions.forEach(option => {
        option.addEventListener("click", function () {
            const selectedFont = this.getAttribute("data-font");
            reader.style.fontFamily = selectedFont;
            localStorage.setItem("selectedFont", selectedFont);
            fontDropdown.style.display = "none"; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        });
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–µ–≥–æ
    document.addEventListener("click", function (event) {
        if (!fontSelectIcon.contains(event.target) && !fontDropdown.contains(event.target)) {
            fontDropdown.style.display = "none";
        }
    });







    function attachNavigationHandlers() {
        const prevPage = document.getElementById("prevPage");
        const nextPage = document.getElementById("nextPage");

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        prevPage?.removeEventListener("click", handlePrevClick);
        nextPage?.removeEventListener("click", handleNextClick);

        prevPage?.addEventListener("click", handlePrevClick);
        nextPage?.addEventListener("click", handleNextClick);

        console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
    }

    function handlePrevClick(event) {
        event.preventDefault();
        console.log("–ö–ª–∏–∫ –ø–æ –ù–∞–∑–∞–¥:", event.target.href);
        loadPage(event.target.href);
    }

    function handleNextClick(event) {
        event.preventDefault();
        console.log("–ö–ª–∏–∫ –ø–æ –í–ø–µ—Ä–µ–¥:", event.target.href);
        loadPage(event.target.href);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ä—É—á–Ω—É—é
    pageInput.addEventListener("change", function () {
        const newPage = parseInt(this.value);
        const totalPages = parseInt(pageInput.getAttribute("max"));
        const bookId = window.location.pathname.split("/")[2];

        if (!isNaN(newPage) && newPage >= 1 && newPage <= totalPages) {
            console.log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", newPage);
            loadPage(`/book/${bookId}?page=${newPage}`);
        } else {
            console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", newPage);
            this.value = pageInput.getAttribute("value");
        }
    });

    window.loadPage = loadPage;
    attachNavigationHandlers();

    document.getElementById("toggleSidebarRight").addEventListener("click", function () {
        document.getElementById("sidebarRight").classList.toggle("open");
    });


    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤







    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

});



